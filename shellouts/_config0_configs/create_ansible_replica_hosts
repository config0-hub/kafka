#!/usr/bin/env python
# ------------------------------------------------------------------------------
# Kafka Ansible Host Configuration Generator
# ------------------------------------------------------------------------------
# This script generates an Ansible hosts file for Kafka cluster configuration.
# It creates host groups for different Kafka components (zookeeper, broker, etc.)
# based on IP addresses provided through environment variables or JSON input.
#
# The script uses Config0 resource management framework for handling inputs
# and configuration.
# ------------------------------------------------------------------------------
# Copyright (C) 2025 Gary Leong <gary@config0.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# ------------------------------------------------------------------------------

import sys

from config0_publisher.loggerly import Config0Logger
from config0_publisher.resource.manage import ResourceCmdHelper


class Main(ResourceCmdHelper):
    """
    Helper class for generating Kafka Ansible host configuration files.
    Inherits from Config0's ResourceCmdHelper for input handling and templating.
    """

    def __init__(self):
        """Initialize the helper with Ansible app configuration."""
        ResourceCmdHelper.__init__(
            self,
            app_name="ansible",
            set_must_exists=["stateful_id"]
        )

        self.classname = 'KAFKA_ANSIBLE_HELPER'
        self.logger = Config0Logger(self.classname, logcategory="cloudprovider")
        self.logger.debug(f"Instantiating {self.classname}")
        self.set_inputargs(add_app_vars=True)
   
        # Remap application variables if needed
        self.remap_app_vars()

    def _add_ips_to_hosts(self, args_key, ansible_key):
        """
        Add IP addresses from input to the Ansible hosts file 
        under the specified group name.
        
        Args:
            args_key (str): Key in inputargs containing comma-separated IPs
            ansible_key (str): Ansible host group name
        """
        self.config_file.write(f'[{ansible_key}]')
        self.config_file.write("\n")

        for _ip in self.inputargs[args_key].split(","):
            self.config_file.write(_ip)
            self.config_file.write("\n")

        self.config_file.write("\n")

    def create(self):
        """
        Create the Ansible hosts file with all Kafka component groups:
        - zookeeper
        - kafka_broker
        - schema_registry
        - kafka_connect
        - kafka_rest
        - ksql
        - control_center
        """
        self.config_file_path = f"{self.exec_dir}/hosts"
        self.config_file = open(self.config_file_path, "w")

        # Add each Kafka component group to the hosts file
        self._add_ips_to_hosts("kafka_zookeeper", "zookeeper")
        self._add_ips_to_hosts("kafka_broker", "kafka_broker")
        self._add_ips_to_hosts("kafka_schema_registry", "schema_registry")
        self._add_ips_to_hosts("kafka_connect", "kafka_connect")
        self._add_ips_to_hosts("kafka_rest", "kafka_rest")
        self._add_ips_to_hosts("kafka_ksql", "ksql")
        self._add_ips_to_hosts("kafka_control_center", "control_center")

        # Process any templates and update vars
        self.templify(clobber=True)

        self.config_file.close()
        self.logger.debug(f"Created Ansible host config file {self.config_file_path}")
        
        # Uncomment to sync configuration to shared location
        # self.sync_to_share()


def usage():
    """Print usage information for the script."""
    print("""
Usage:
  script + environmental variables
  or
  script + json_input (as argument)

Environmental variables:
  create:
    JOB_INSTANCE_ID
    SCHEDULE_ID
    RUN_ID
    ANS_VAR_kafka_zookeeper         (comma-separated IPs)
    ANS_VAR_kafka_broker            (comma-separated IPs)
    ANS_VAR_kafka_schema_registry   (comma-separated IPs)
    ANS_VAR_kafka_connect           (comma-separated IPs)
    ANS_VAR_kafka_rest              (comma-separated IPs)
    ANS_VAR_kafka_ksql              (comma-separated IPs)
    ANS_VAR_kafka_control_center    (comma-separated IPs)
    METHOD
    """)
    exit(4)


if __name__ == '__main__':
    # Check for JSON input as command-line argument
    try:
        json_input = sys.argv[1]
    except IndexError:
        json_input = None

    # Initialize main class
    main = Main()

    # Execute the appropriate method
    if main.inputargs.get("method", "create") == "create":
        # Define required input keys
        required_keys = [
            "kafka_zookeeper",
            "kafka_broker",
            "kafka_schema_registry",
            "kafka_connect",
            "kafka_rest",
            "kafka_ksql",
            "kafka_control_center"
        ]

        # Validate all required inputs are present
        main.check_required_inputargs(keys=required_keys)
        
        # Create the hosts file
        main.create()
    else:
        # Only show an error if the method is not supported
        usage()
        print(f'Method "{main.inputargs.get("method", "create")}" not supported!')
        exit(4)
